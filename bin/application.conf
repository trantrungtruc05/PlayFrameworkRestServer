# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile
# ~~~~~
# Play uses HOCON as its configuration file format.  HOCON has a number
# of advantages over other config formats, but there are two things that
# can be used when modifying settings.
#
# You can include other configuration files in this main application.conf file:
#include "extra-config.conf"
#
# You can declare variables and substitute for them:
#mykey = ${some.value}
#
# And if an environment variable exists when there is no other subsitution, then
# HOCON will fall back to substituting environment variable:
#mykey = ${JAVA_HOME}

## Application name and version
app {
    version   = "0.1.0"
    name      = "ghncj-messageProcess"
    shortname = "pjt"
    fullname  = ${app.name} ${app.version}
    desc      = "Message Process"
}

## Spring's beans configuration file (relative with application's home directory)
spring.conf = "conf/spring/beans.xml"

## Secret key
# https://www.playframework.com/documentation/2.6.x/ApplicationSecret
# ~~~~~
# The secret key is used to sign Play's session cookie.
# This should be changed for production: generate new crypto create with command `playGenerateSecret`
play.http.secret.key = "changeme-12kmfn0ajid8nkum9otm2dadrp8oiahkcjljtcafif8gvi89tvr1"

## API configurations
api {
    # Max API body size in bytes (default 16Kb)
    parser.maxBodySize = 16384

    # Thrift config: client timeout in milliseconds
    thrift.clientTimeout = 10000
    # Thrift config: Max frame size in bytes
    thrift.maxFrameSize = 65536
    # Thrift config: Max read buffer size in bytes
    thrift.maxReadBufferSize = 16777216
    # Thrift config: Number of selector threads
    thrift.selectorThreads = 2
    # Thrift config: Number of worker threads
    thrift.workerThreads = 16
    # Thrift config: Number of request allowed in queue per worker threads (for non-SSL Thrift server)
    thrift.queueSizePerThread = 1000
}

## Workers are special actors that are scheduled to run tasks at specific time
akka.workers = [
    akka.workers.SamplePer10SecsWorker
    akka.workers.SampleAtSec12Worker
]

## Akka
# https://www.playframework.com/documentation/latest/JavaAkka#Configuration
play.akka.config = "akka"
play.akka.actor-system = "application"
akka {
    # To enable akka logging: remember to add <logger name="akka.actor" level="INFO" /> to logback-dev.xml and logback-prod.xml
    log-config-on-start = false
    jvm-exit-on-fatal-error = false

    log-dead-letters = 0
    log-dead-letters-during-shutdown = off

    scheduler {
        tick-duration   = 5ms
        ticks-per-wheel = 1024
    }

    actor {
        # https://playframework.com/documentation/2.6.x/ThreadPools
        default-dispatcher {
            # Throughput = 1 means "as fair as possible"
            throughput = 1
            executor = "fork-join-executor"
            fork-join-executor = {
                # Settings this to 1 instead of 3 seems to improve performance.
                parallelism-factor = 1.0
                parallelism-max = 64

                # Setting this to LIFO changes the fork-join-executor
                # to use a stack discipline for task scheduling. This usually
                # improves throughput at the cost of possibly increasing
                # latency and risking task starvation (which should be rare).
                # Setting to "FIFO" to use queue like peeking mode which "poll" or "LIFO" to use stack
                # like peeking mode which "pop".
                task-peeking-mode = FIFO
            }
        }


        # Thread pool for DB access (usually blocking IO)
        # Lookup with actorSystem.dispatchers().lookup("akka.actor.db-dispatcher")
        db-dispatcher {
            throughput = 1
            executor = "thread-pool-executor"
            thread-pool-executor {
                # Set this value to maximum total number of DB connections
                fixed-pool-size = 4
            }
        }

        # Thread pool for worker tasks
        # Lookup with actorSystem.dispatchers().lookup("akka.actor.worker-dispatcher")
        worker-dispatcher {
            throughput = 1
            executor = "thread-pool-executor"
            thread-pool-executor {
                core-pool-size-factor = 2.0
                core-pool-size-max = 64
            }
        }
    }
}

## Modules
# https://www.playframework.com/documentation/latest/Modules
# https://www.playframework.com/documentation/latest/GlobalSettings
# https://playframework.com/documentation/latest/ModuleDirectory
play.modules {
    # By default, Play will load any class called Module that is defined
    # in the root package (the "app" directory), or you can define them
    # explicitly below.
    # If there are any built-in modules that you want to enable, you can list them here.
    enabled += modules.registry.RegistryModule
    # enabled += modules.thriftservice.ThriftServiceModule
    # enabled += modules.grpc.GrpcServiceModule

    # If there are any built-in modules that you want to disable, you can list them here.
    #disabled += ""
}

## Internationalization
# https://www.playframework.com/documentation/latest/JavaI18N
play.i18n.langs = [ "en", "vi" ]

## Akka HTTP server
# https://playframework.com/documentation/2.6.x/SettingsAkkaHttp
play.server.akka.http2 {
    enabled = true
    enabled = ${?http2.enabled}
}
play {
    server {
        provider = "play.core.server.AkkaHttpServerProvider"

        http {
            # Set to "disabled" to disable HTTP
            port = 9000
            port = ${?http.port}

            address = "0.0.0.0"
            address = ${?http.address}

            # The idle timeout for an open connection after which it will be closed
            # Set to null to disable the timeout
            idleTimeout = 75 seconds
        }

        https {
            #port = 9022
            #port = ${?https.port}

            #address = "0.0.0.0"
            #address = ${?https.address}

            # The idle timeout for an open connection after which it will be closed
            # Set to null to disable the timeout
            idleTimeout = ${play.server.http.idleTimeout}

            # The SSL engine provider
            engineProvider = "play.core.server.ssl.DefaultSSLEngineProvider"
            engineProvider = ${?play.http.sslengineprovider}

            # HTTPS keystore configuration, used by the default SSL engine provider
            keyStore {
                # The path to the keystore
                path = "conf/keys/server.keystore"
                path = ${?https.keyStore}

                # The type of the keystore
                type = "JKS"
                type = ${?https.keyStoreType}

                # The password for the keystore
                password = ""
                password = ${?https.keyStorePassword}

                # The algorithm to use. If not set, uses the platform default algorithm.
                algorithm = ${?https.keyStoreAlgorithm}
            }

            # HTTPS truststore configuration
            trustStore {
                # If true, does not do CA verification on client side certificates
                noCaVerification = true
            }

            # Whether JSSE want client auth mode should be used. This means, the server
            # will request a client certificate, but won't fail if one isn't provided.
            wantClientAuth = false

            # Whether JSSE need client auth mode should be used. This means, the server
            # will request a client certificate, and will fail and terminate the session
            # if one isn't provided.
            needClientAuth = false
        }

        # The path to the process id file created by the server when it runs.
        pidfile.path = RUNNING_PID
        pidfile.path = ${?pidfile.path}

        websocket {
            # Maximum allowable frame payload length. Setting this value to your application's
            # requirement may reduce denial of service attacks using long data frames.
            frame.maxLength = 64k
            frame.maxLength = ${?websocket.frame.maxLength}
        }

        akka {
            # How long to wait when binding to the listening socket
            bindTimeout = 2 seconds

            # How long a request takes until it times out
            requestTimeout = null

            # Enables/disables automatic handling of HEAD requests.
            # If this setting is enabled the server dispatches HEAD requests as GET
            # requests to the application and automatically strips off all message
            # bodies from outgoing responses.
            # Note that, even when this setting is off the server will never send
            # out message bodies on responses to HEAD requests.
            transparent-head-requests = off

            # If this setting is empty the server only accepts requests that carry a
            # non-empty `Host` header. Otherwise it responds with `400 Bad Request`.
            # Set to a non-empty value to be used in lieu of a missing or empty `Host`
            # header to make the server accept such requests.
            # Note that the server will never accept HTTP/1.1 request without a `Host`
            # header, i.e. this setting only affects HTTP/1.1 requests with an empty
            # `Host` header as well as HTTP/1.0 requests.
            # Examples: `www.spray.io` or `example.com:8080`
            default-host-header = ""

            # The default value of the `Server` header to produce if no
            # explicit `Server`-header was included in a response.
            # If this value is the empty string and no header was included in
            # the request, no `Server` header will be rendered at all.
            server-header = ""

            # Configures the processing mode when encountering illegal characters in
            # header value of response.
            #
            # Supported mode:
            # `error`  : default mode, throw an ParsingException and terminate the processing
            # `warn`   : ignore the illegal characters in response header value and log a warning message
            # `ignore` : just ignore the illegal characters in response header value
            illegal-response-header-value-processing-mode = warn

            # This setting is set in `akka.http.server.parsing.max-content-length`
            # Play uses the concept of a `BodyParser` to enforce this limit, so we override it to infinite.
            max-content-length = infinite
        }
    }
}

## WS (HTTP Client)
# https://www.playframework.com/documentation/2.5.x/JavaWS#Configuring-WS
# ~~~~~
# Remember to enable ws in build.sbt:
# libraryDependencies += javaWs
play.ws {
    followRedirects = true

    # Enable PlayWS to use proxy properties (such as: http.proxyHost, http.proxyPort, http.nonProxyHosts, https.proxyHost, https.proxyPort)
    # See: https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html
    useProxyProperties = true
    useragent = "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36"
    compressionEnabled = true
    timeout {
        connection = 5 seconds
        idle       = 10 seconds
        request    = 30 seconds
    }

    ahc.maxConnectionsTotal = 64

    ## WS SSL
    # https://www.playframework.com/documentation/latest/WsSSL
    ssl {
        #debug.handshake = true
        #trustManager = {
        #  stores = [
        #    { type = "JKS", path = "exampletrust.jks" }
        #  ]
        #}
    }
}

## Post size limit
# https://www.playframework.com/documentation/latest/JavaBodyParsers
play.http.parser.maxMemoryBuffer = 8K
play.http.parser.maxDiskBuffer = 128M

## Filters
# https://www.playframework.com/documentation/latest/Filters
# ~~~~~
# Remember to enable filters in build.sbt:
# libraryDependencies += filters
play.http.filters = "filters.HttpFilters"
play.filters {
    ## CORS filter configuration
    # https://www.playframework.com/documentation/latest/CorsFilter
    # ~~~~~
    # CORS is a protocol that allows web applications to make requests from the browser
    # across different domains.
    # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
    # dependencies on CORS settings.
    cors {
        # Filter paths by a whitelist of path prefixes
        #pathPrefixes = ["/some/path", ...]

        # The allowed origins. If null, all origins are allowed.
        #allowedOrigins = ["http://www.example.com"]

        # The allowed HTTP methods. If null, all methods are allowed
        #allowedHttpMethods = ["GET", "POST"]
    }

    ## CSRF Filter
    # https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
    # ~~~~~
    # Play supports multiple methods for verifying that a request is not a CSRF request.
    # The primary mechanism is a CSRF token. This token gets placed either in the query string
    # or body of every form submitted, and also gets placed in the users session.
    # Play then verifies that both tokens are present and match.
    csrf {
        # Sets the cookie to be sent only over HTTPS
        #cookie.secure = true

        # Defaults to CSRFErrorHandler in the root package.
        #errorHandler = MyCSRFErrorHandler
    }

    ## Security headers filter configuration
    # https://www.playframework.com/documentation/latest/SecurityHeaders
    # ~~~~~
    # Defines security headers that prevent XSS attacks.
    # If enabled, then all options are set to the below configuration by default:
    headers {
        # The X-Frame-Options header. If null, the header is not set.
        #frameOptions = "DENY"

        # The X-XSS-Protection header. If null, the header is not set.
        #xssProtection = "1; mode=block"

        # The X-Content-Type-Options header. If null, the header is not set.
        #contentTypeOptions = "nosniff"

        # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
        #permittedCrossDomainPolicies = "master-only"

        # The Content-Security-Policy header. If null, the header is not set.
        #contentSecurityPolicy = "default-src 'self'"
    }

    ## Allowed hosts filter configuration
    # https://www.playframework.com/documentation/latest/AllowedHostsFilter
    # ~~~~~
    # Play provides a filter that lets you configure which hosts can access your application.
    # This is useful to prevent cache poisoning attacks.
    hosts {
        # Allow requests to example.com, its subdomains, and localhost:9000.
        #allowed = [".example.com", "localhost:9000"]
    }
}
